{
    "sourceFile": "src/utils/get.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1715846341972,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1715846365532,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n type GetReturnType<T> = T | undefined;\n type ValueType = Record<string | number, unknown>;\n \n-function deepGet<T>(\n+export function get<T>(\n   value: unknown,\n   query: string | Array<string | number>,\n   defaultVal: GetReturnType<T> = undefined,\n ): GetReturnType<T> {\n@@ -25,6 +25,7 @@\n   ) {\n     return defaultVal;\n   }\n \n-  return deepGet((value as ValueType)[key], splitQuery.slice(1), defaultVal);\n+  return get((value as ValueType)[key], splitQuery.slice(1), defaultVal);\n }\n+\n"
                },
                {
                    "date": 1715846382885,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,8 @@\n type GetReturnType<T> = T | undefined;\n type ValueType = Record<string | number, unknown>;\n \n+// simple implementation of lodash get\n export function get<T>(\n   value: unknown,\n   query: string | Array<string | number>,\n   defaultVal: GetReturnType<T> = undefined,\n"
                }
            ],
            "date": 1715846341972,
            "name": "Commit-0",
            "content": "type GetReturnType<T> = T | undefined;\ntype ValueType = Record<string | number, unknown>;\n\nfunction deepGet<T>(\n  value: unknown,\n  query: string | Array<string | number>,\n  defaultVal: GetReturnType<T> = undefined,\n): GetReturnType<T> {\n  const splitQuery = Array.isArray(query)\n    ? query\n    : query\n        .replace(/(\\[(\\d)\\])/g, \".$2\")\n        .replace(/^\\./, \"\")\n        .split(\".\");\n\n  if (!splitQuery.length || splitQuery[0] === undefined) return value as T;\n\n  const key = splitQuery[0];\n\n  if (\n    typeof value !== \"object\" ||\n    value === null ||\n    !(key in value) ||\n    (value as ValueType)[key] === undefined\n  ) {\n    return defaultVal;\n  }\n\n  return deepGet((value as ValueType)[key], splitQuery.slice(1), defaultVal);\n}\n"
        }
    ]
}
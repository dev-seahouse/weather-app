{
    "sourceFile": "src/App.test.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 12,
            "patches": [
                {
                    "date": 1715789165744,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1716055232848,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,143 @@\n+import {\n+  beforeEach,\n+  describe,\n+  expect,\n+  it,\n+  vi,\n+} from \"vitest\";\n+\n+import { getPlaces } from \"@/api/MapBoxApi\";\n+import type { GetPlacesResponse } from \"@/api/MapBoxApi.types\";\n+import {\n+  useAddSearchHistory,\n+  useSetLocationInfo,\n+} from \"@/stores/weather/useWeatherStore.selectors\";\n+import {\n+  fireEvent,\n+  render,\n+  screen,\n+  waitFor,\n+} from \"@testing-library/react\";\n+\n+import App from \"./App\";\n+\n+// Mocking external dependencies\n+vi.mock(\"@/api/MapBoxApi\", () => ({\n+  getPlaces: vi.fn(),\n+}));\n+\n+vi.mock(\"@/stores/weather/useWeatherStore.selectors\", () => ({\n+  useSetLocationInfo: vi.fn(),\n+  useAddSearchHistory: vi.fn(),\n+}));\n+\n+describe(\"App\", () => {\n+  const mockGetPlacesResponse: GetPlacesResponse = {\n+    type: \"FeatureCollection\",\n+    features: [\n+      {\n+        type: \"Feature\",\n+        id: \"1\",\n+        geometry: { type: \"Point\", coordinates: [102.0, 0.5] },\n+        properties: {\n+          mapbox_id: \"1\",\n+          feature_type: \"place\",\n+          full_address: \"123 Test Street, Test City, TC\",\n+          name: \"Test Place\",\n+          name_preferred: \"Test Place\",\n+          coordinates: { longitude: 102.0, latitude: 0.5 },\n+          place_formatted: \"123 Test Street, Test City, TC\",\n+          bbox: [101.5, 0.5, 102.5, 1.0],\n+          context: {\n+            region: {\n+              mapbox_id: \"region1\",\n+              name: \"Test Region\",\n+              wikidata_id: \"Q1\",\n+              region_code: \"TR\",\n+              region_code_full: \"Test Region Code\",\n+            },\n+            place: {\n+              mapbox_id: \"place1\",\n+              name: \"Test Place\",\n+              wikidata_id: \"Q2\",\n+              short_code: \"TP\",\n+            },\n+            country: {\n+              mapbox_id: \"country1\",\n+              name: \"Test Country\",\n+              wikidata_id: \"Q3\",\n+              country_code: \"TC\",\n+              country_code_alpha_3: \"TCA\",\n+            },\n+            locality: {\n+              mapbox_id: \"locality1\",\n+              name: \"Test Locality\",\n+              wikidata_id: \"Q4\",\n+            },\n+            street: { mapbox_id: \"street1\", name: \"Test Street\" },\n+            postcode: { mapbox_id: \"postcode1\", name: \"12345\" },\n+          },\n+        },\n+      },\n+    ],\n+    attribution: \"Test Attribution\",\n+  };\n+\n+  const mockSetLocationInfo = vi.fn();\n+  const mockAddSearchHistory = vi.fn();\n+\n+  beforeEach(() => {\n+    vi.clearAllMocks();\n+    (getPlaces as vi.Mock).mockResolvedValue({ data: mockGetPlacesResponse });\n+    (useSetLocationInfo as vi.Mock).mockReturnValue(mockSetLocationInfo);\n+    (useAddSearchHistory as vi.Mock).mockReturnValue(mockAddSearchHistory);\n+  });\n+\n+  it(\"renders without crashing\", () => {\n+    render(<App />);\n+  });\n+\n+  it(\"renders AutoComplete component with correct props\", () => {\n+    render(<App />);\n+\n+    const autoComplete = screen.getByLabelText(\"Country\");\n+    expect(autoComplete).toBeInTheDocument();\n+  });\n+\n+  it(\"renders DisplayWeather and SearchHistory components\", () => {\n+    render(<App />);\n+\n+    expect(screen.getByText(\"Today's Weather\")).toBeInTheDocument();\n+    expect(screen.getByText(\"Search History\")).toBeInTheDocument();\n+  });\n+\n+  it(\"handleOptionSelected updates location and adds search history\", async () => {\n+    render(<App />);\n+\n+    const autoComplete = screen.getByLabelText(\"Country\");\n+\n+    fireEvent.change(autoComplete, { target: { value: \"Test\" } });\n+\n+    await waitFor(() => {\n+      expect(getPlaces).toHaveBeenCalledWith({ q: \"Test\" });\n+    });\n+\n+    fireEvent.keyDown(autoComplete, { key: \"ArrowDown\" });\n+    fireEvent.keyDown(autoComplete, { key: \"Enter\" });\n+\n+    await waitFor(() => {\n+      expect(mockSetLocationInfo).toHaveBeenCalledWith({\n+        longitude: 102.0,\n+        latitude: 0.5,\n+        countryCode: \"TC\",\n+        regionName: \"Test Region\",\n+      });\n+      expect(mockAddSearchHistory).toHaveBeenCalledWith({\n+        longitude: 102.0,\n+        latitude: 0.5,\n+        countryCode: \"TC\",\n+        regionName: \"Test Region\",\n+      });\n+    });\n+  });\n+});\n"
                },
                {
                    "date": 1716055253868,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -92,8 +92,9 @@\n     (useSetLocationInfo as vi.Mock).mockReturnValue(mockSetLocationInfo);\n     (useAddSearchHistory as vi.Mock).mockReturnValue(mockAddSearchHistory);\n   });\n \n+  // eslint-disable-next-line vitest/expect-expect\n   it(\"renders without crashing\", () => {\n     render(<App />);\n   });\n \n"
                },
                {
                    "date": 1716055555439,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -125,20 +125,18 @@\n \n     fireEvent.keyDown(autoComplete, { key: \"ArrowDown\" });\n     fireEvent.keyDown(autoComplete, { key: \"Enter\" });\n \n-    await waitFor(() => {\n-      expect(mockSetLocationInfo).toHaveBeenCalledWith({\n-        longitude: 102.0,\n-        latitude: 0.5,\n-        countryCode: \"TC\",\n-        regionName: \"Test Region\",\n-      });\n-      expect(mockAddSearchHistory).toHaveBeenCalledWith({\n-        longitude: 102.0,\n-        latitude: 0.5,\n-        countryCode: \"TC\",\n-        regionName: \"Test Region\",\n-      });\n+    expect(mockSetLocationInfo).toHaveBeenCalledWith({\n+      longitude: 102.0,\n+      latitude: 0.5,\n+      countryCode: \"TC\",\n+      regionName: \"Test Region\",\n     });\n+    expect(mockAddSearchHistory).toHaveBeenCalledWith({\n+      longitude: 102.0,\n+      latitude: 0.5,\n+      countryCode: \"TC\",\n+      regionName: \"Test Region\",\n+    });\n   });\n });\n"
                },
                {
                    "date": 1716055673201,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -107,9 +107,9 @@\n \n   it(\"renders DisplayWeather and SearchHistory components\", () => {\n     render(<App />);\n \n-    expect(screen.getByText(\"Today's Weather\")).toBeInTheDocument();\n+    expect(screen.getByText(\"Today's Weather\"));\n     expect(screen.getByText(\"Search History\")).toBeInTheDocument();\n   });\n \n   it(\"handleOptionSelected updates location and adds search history\", async () => {\n"
                },
                {
                    "date": 1716055683649,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -107,9 +107,9 @@\n \n   it(\"renders DisplayWeather and SearchHistory components\", () => {\n     render(<App />);\n \n-    expect(screen.getByText(\"Today's Weather\"));\n+    expect(screen.getByText(\"Today's Weather\")).to;\n     expect(screen.getByText(\"Search History\")).toBeInTheDocument();\n   });\n \n   it(\"handleOptionSelected updates location and adds search history\", async () => {\n"
                },
                {
                    "date": 1716055692162,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -107,9 +107,9 @@\n \n   it(\"renders DisplayWeather and SearchHistory components\", () => {\n     render(<App />);\n \n-    expect(screen.getByText(\"Today's Weather\")).to;\n+    expect(screen.getByText(\"Today's Weather\")).toBe;\n     expect(screen.getByText(\"Search History\")).toBeInTheDocument();\n   });\n \n   it(\"handleOptionSelected updates location and adds search history\", async () => {\n"
                },
                {
                    "date": 1716055721139,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,5 @@\n import {\n-  beforeEach,\n   describe,\n   expect,\n   it,\n   vi,\n@@ -8,12 +7,8 @@\n \n import { getPlaces } from \"@/api/MapBoxApi\";\n import type { GetPlacesResponse } from \"@/api/MapBoxApi.types\";\n import {\n-  useAddSearchHistory,\n-  useSetLocationInfo,\n-} from \"@/stores/weather/useWeatherStore.selectors\";\n-import {\n   fireEvent,\n   render,\n   screen,\n   waitFor,\n@@ -85,34 +80,13 @@\n \n   const mockSetLocationInfo = vi.fn();\n   const mockAddSearchHistory = vi.fn();\n \n-  beforeEach(() => {\n-    vi.clearAllMocks();\n-    (getPlaces as vi.Mock).mockResolvedValue({ data: mockGetPlacesResponse });\n-    (useSetLocationInfo as vi.Mock).mockReturnValue(mockSetLocationInfo);\n-    (useAddSearchHistory as vi.Mock).mockReturnValue(mockAddSearchHistory);\n-  });\n-\n   // eslint-disable-next-line vitest/expect-expect\n   it(\"renders without crashing\", () => {\n     render(<App />);\n   });\n \n-  it(\"renders AutoComplete component with correct props\", () => {\n-    render(<App />);\n-\n-    const autoComplete = screen.getByLabelText(\"Country\");\n-    expect(autoComplete).toBeInTheDocument();\n-  });\n-\n-  it(\"renders DisplayWeather and SearchHistory components\", () => {\n-    render(<App />);\n-\n-    expect(screen.getByText(\"Today's Weather\")).toBe;\n-    expect(screen.getByText(\"Search History\")).toBeInTheDocument();\n-  });\n-\n   it(\"handleOptionSelected updates location and adds search history\", async () => {\n     render(<App />);\n \n     const autoComplete = screen.getByLabelText(\"Country\");\n"
                },
                {
                    "date": 1716055758914,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,116 +0,0 @@\n-import {\n-  describe,\n-  expect,\n-  it,\n-  vi,\n-} from \"vitest\";\n-\n-import { getPlaces } from \"@/api/MapBoxApi\";\n-import type { GetPlacesResponse } from \"@/api/MapBoxApi.types\";\n-import {\n-  fireEvent,\n-  render,\n-  screen,\n-  waitFor,\n-} from \"@testing-library/react\";\n-\n-import App from \"./App\";\n-\n-// Mocking external dependencies\n-vi.mock(\"@/api/MapBoxApi\", () => ({\n-  getPlaces: vi.fn(),\n-}));\n-\n-vi.mock(\"@/stores/weather/useWeatherStore.selectors\", () => ({\n-  useSetLocationInfo: vi.fn(),\n-  useAddSearchHistory: vi.fn(),\n-}));\n-\n-describe(\"App\", () => {\n-  const mockGetPlacesResponse: GetPlacesResponse = {\n-    type: \"FeatureCollection\",\n-    features: [\n-      {\n-        type: \"Feature\",\n-        id: \"1\",\n-        geometry: { type: \"Point\", coordinates: [102.0, 0.5] },\n-        properties: {\n-          mapbox_id: \"1\",\n-          feature_type: \"place\",\n-          full_address: \"123 Test Street, Test City, TC\",\n-          name: \"Test Place\",\n-          name_preferred: \"Test Place\",\n-          coordinates: { longitude: 102.0, latitude: 0.5 },\n-          place_formatted: \"123 Test Street, Test City, TC\",\n-          bbox: [101.5, 0.5, 102.5, 1.0],\n-          context: {\n-            region: {\n-              mapbox_id: \"region1\",\n-              name: \"Test Region\",\n-              wikidata_id: \"Q1\",\n-              region_code: \"TR\",\n-              region_code_full: \"Test Region Code\",\n-            },\n-            place: {\n-              mapbox_id: \"place1\",\n-              name: \"Test Place\",\n-              wikidata_id: \"Q2\",\n-              short_code: \"TP\",\n-            },\n-            country: {\n-              mapbox_id: \"country1\",\n-              name: \"Test Country\",\n-              wikidata_id: \"Q3\",\n-              country_code: \"TC\",\n-              country_code_alpha_3: \"TCA\",\n-            },\n-            locality: {\n-              mapbox_id: \"locality1\",\n-              name: \"Test Locality\",\n-              wikidata_id: \"Q4\",\n-            },\n-            street: { mapbox_id: \"street1\", name: \"Test Street\" },\n-            postcode: { mapbox_id: \"postcode1\", name: \"12345\" },\n-          },\n-        },\n-      },\n-    ],\n-    attribution: \"Test Attribution\",\n-  };\n-\n-  const mockSetLocationInfo = vi.fn();\n-  const mockAddSearchHistory = vi.fn();\n-\n-  // eslint-disable-next-line vitest/expect-expect\n-  it(\"renders without crashing\", () => {\n-    render(<App />);\n-  });\n-\n-  it(\"handleOptionSelected updates location and adds search history\", async () => {\n-    render(<App />);\n-\n-    const autoComplete = screen.getByLabelText(\"Country\");\n-\n-    fireEvent.change(autoComplete, { target: { value: \"Test\" } });\n-\n-    await waitFor(() => {\n-      expect(getPlaces).toHaveBeenCalledWith({ q: \"Test\" });\n-    });\n-\n-    fireEvent.keyDown(autoComplete, { key: \"ArrowDown\" });\n-    fireEvent.keyDown(autoComplete, { key: \"Enter\" });\n-\n-    expect(mockSetLocationInfo).toHaveBeenCalledWith({\n-      longitude: 102.0,\n-      latitude: 0.5,\n-      countryCode: \"TC\",\n-      regionName: \"Test Region\",\n-    });\n-    expect(mockAddSearchHistory).toHaveBeenCalledWith({\n-      longitude: 102.0,\n-      latitude: 0.5,\n-      countryCode: \"TC\",\n-      regionName: \"Test Region\",\n-    });\n-  });\n-});\n\\ No newline at end of file\n"
                },
                {
                    "date": 1716055766653,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,1 +0,0 @@\n-\n\\ No newline at end of file\n"
                },
                {
                    "date": 1716055827645,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,1 +1,144 @@\n+import React from \"react\";\n \n+import {\n+  describe,\n+  expect,\n+  it,\n+  vi,\n+} from \"vitest\";\n+\n+import { getPlaces } from \"@/api/MapBoxApi\";\n+import type { GetPlacesResponse } from \"@/api/MapBoxApi.types\";\n+import {\n+  useAddSearchHistory,\n+  useSetLocationInfo,\n+} from \"@/stores/weather/useWeatherStore.selectors\";\n+import {\n+  fireEvent,\n+  render,\n+  screen,\n+  waitFor,\n+} from \"@testing-library/react\";\n+\n+import App from \"./App\";\n+\n+// Mocking external dependencies\n+vi.mock(\"@/api/MapBoxApi\", () => ({\n+  getPlaces: vi.fn(),\n+}));\n+\n+vi.mock(\"@/stores/weather/useWeatherStore.selectors\", () => ({\n+  useSetLocationInfo: vi.fn(),\n+  useAddSearchHistory: vi.fn(),\n+}));\n+\n+describe(\"App\", () => {\n+  const mockGetPlacesResponse: GetPlacesResponse = {\n+    type: \"FeatureCollection\",\n+    features: [\n+      {\n+        type: \"Feature\",\n+        id: \"1\",\n+        geometry: { type: \"Point\", coordinates: [102.0, 0.5] },\n+        properties: {\n+          mapbox_id: \"1\",\n+          feature_type: \"place\",\n+          full_address: \"123 Test Street, Test City, TC\",\n+          name: \"Test Place\",\n+          name_preferred: \"Test Place\",\n+          coordinates: { longitude: 102.0, latitude: 0.5 },\n+          place_formatted: \"123 Test Street, Test City, TC\",\n+          bbox: [101.5, 0.5, 102.5, 1.0],\n+          context: {\n+            region: {\n+              mapbox_id: \"region1\",\n+              name: \"Test Region\",\n+              wikidata_id: \"Q1\",\n+              region_code: \"TR\",\n+              region_code_full: \"Test Region Code\",\n+            },\n+            place: {\n+              mapbox_id: \"place1\",\n+              name: \"Test Place\",\n+              wikidata_id: \"Q2\",\n+              short_code: \"TP\",\n+            },\n+            country: {\n+              mapbox_id: \"country1\",\n+              name: \"Test Country\",\n+              wikidata_id: \"Q3\",\n+              country_code: \"TC\",\n+              country_code_alpha_3: \"TCA\",\n+            },\n+            locality: {\n+              mapbox_id: \"locality1\",\n+              name: \"Test Locality\",\n+              wikidata_id: \"Q4\",\n+            },\n+            street: { mapbox_id: \"street1\", name: \"Test Street\" },\n+            postcode: { mapbox_id: \"postcode1\", name: \"12345\" },\n+          },\n+        },\n+      },\n+    ],\n+    attribution: \"Test Attribution\",\n+  };\n+\n+  const mockSetLocationInfo = vi.fn();\n+  const mockAddSearchHistory = vi.fn();\n+\n+  beforeEach(() => {\n+    vi.clearAllMocks();\n+    (getPlaces as vi.Mock).mockResolvedValue({ data: mockGetPlacesResponse });\n+    (useSetLocationInfo as vi.Mock).mockReturnValue(mockSetLocationInfo);\n+    (useAddSearchHistory as vi.Mock).mockReturnValue(mockAddSearchHistory);\n+  });\n+\n+  it(\"renders without crashing\", () => {\n+    render(<App />);\n+  });\n+\n+  it(\"renders AutoComplete component with correct props\", () => {\n+    render(<App />);\n+\n+    const autoComplete = screen.getByLabelText(\"Country\");\n+    expect(autoComplete).toBeInTheDocument();\n+  });\n+\n+  it(\"renders DisplayWeather and SearchHistory components\", () => {\n+    render(<App />);\n+\n+    expect(screen.getByText(\"Today's Weather\")).toBeInTheDocument();\n+    expect(screen.getByText(\"Search History\")).toBeInTheDocument();\n+  });\n+\n+  it(\"handleOptionSelected updates location and adds search history\", async () => {\n+    render(<App />);\n+\n+    const autoComplete = screen.getByLabelText(\"Country\");\n+\n+    fireEvent.change(autoComplete, { target: { value: \"Test\" } });\n+\n+    await waitFor(() => {\n+      expect(getPlaces).toHaveBeenCalledWith({ q: \"Test\" });\n+    });\n+\n+    fireEvent.keyDown(autoComplete, { key: \"ArrowDown\" });\n+    fireEvent.keyDown(autoComplete, { key: \"Enter\" });\n+\n+    await waitFor(() => {\n+      expect(mockSetLocationInfo).toHaveBeenCalledWith({\n+        longitude: 102.0,\n+        latitude: 0.5,\n+        countryCode: \"TC\",\n+        regionName: \"Test Region\",\n+      });\n+      expect(mockAddSearchHistory).toHaveBeenCalledWith({\n+        longitude: 102.0,\n+        latitude: 0.5,\n+        countryCode: \"TC\",\n+        regionName: \"Test Region\",\n+      });\n+    });\n+  });\n+});\n"
                },
                {
                    "date": 1716055842446,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,4 +1,6 @@\n+import \"@testing-library/jest-dom/vitest\";\n+\n import React from \"react\";\n \n import {\n   describe,\n"
                },
                {
                    "date": 1716055860194,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,146 +0,0 @@\n-import \"@testing-library/jest-dom/vitest\";\n-\n-import React from \"react\";\n-\n-import {\n-  describe,\n-  expect,\n-  it,\n-  vi,\n-} from \"vitest\";\n-\n-import { getPlaces } from \"@/api/MapBoxApi\";\n-import type { GetPlacesResponse } from \"@/api/MapBoxApi.types\";\n-import {\n-  useAddSearchHistory,\n-  useSetLocationInfo,\n-} from \"@/stores/weather/useWeatherStore.selectors\";\n-import {\n-  fireEvent,\n-  render,\n-  screen,\n-  waitFor,\n-} from \"@testing-library/react\";\n-\n-import App from \"./App\";\n-\n-// Mocking external dependencies\n-vi.mock(\"@/api/MapBoxApi\", () => ({\n-  getPlaces: vi.fn(),\n-}));\n-\n-vi.mock(\"@/stores/weather/useWeatherStore.selectors\", () => ({\n-  useSetLocationInfo: vi.fn(),\n-  useAddSearchHistory: vi.fn(),\n-}));\n-\n-describe(\"App\", () => {\n-  const mockGetPlacesResponse: GetPlacesResponse = {\n-    type: \"FeatureCollection\",\n-    features: [\n-      {\n-        type: \"Feature\",\n-        id: \"1\",\n-        geometry: { type: \"Point\", coordinates: [102.0, 0.5] },\n-        properties: {\n-          mapbox_id: \"1\",\n-          feature_type: \"place\",\n-          full_address: \"123 Test Street, Test City, TC\",\n-          name: \"Test Place\",\n-          name_preferred: \"Test Place\",\n-          coordinates: { longitude: 102.0, latitude: 0.5 },\n-          place_formatted: \"123 Test Street, Test City, TC\",\n-          bbox: [101.5, 0.5, 102.5, 1.0],\n-          context: {\n-            region: {\n-              mapbox_id: \"region1\",\n-              name: \"Test Region\",\n-              wikidata_id: \"Q1\",\n-              region_code: \"TR\",\n-              region_code_full: \"Test Region Code\",\n-            },\n-            place: {\n-              mapbox_id: \"place1\",\n-              name: \"Test Place\",\n-              wikidata_id: \"Q2\",\n-              short_code: \"TP\",\n-            },\n-            country: {\n-              mapbox_id: \"country1\",\n-              name: \"Test Country\",\n-              wikidata_id: \"Q3\",\n-              country_code: \"TC\",\n-              country_code_alpha_3: \"TCA\",\n-            },\n-            locality: {\n-              mapbox_id: \"locality1\",\n-              name: \"Test Locality\",\n-              wikidata_id: \"Q4\",\n-            },\n-            street: { mapbox_id: \"street1\", name: \"Test Street\" },\n-            postcode: { mapbox_id: \"postcode1\", name: \"12345\" },\n-          },\n-        },\n-      },\n-    ],\n-    attribution: \"Test Attribution\",\n-  };\n-\n-  const mockSetLocationInfo = vi.fn();\n-  const mockAddSearchHistory = vi.fn();\n-\n-  beforeEach(() => {\n-    vi.clearAllMocks();\n-    (getPlaces as vi.Mock).mockResolvedValue({ data: mockGetPlacesResponse });\n-    (useSetLocationInfo as vi.Mock).mockReturnValue(mockSetLocationInfo);\n-    (useAddSearchHistory as vi.Mock).mockReturnValue(mockAddSearchHistory);\n-  });\n-\n-  it(\"renders without crashing\", () => {\n-    render(<App />);\n-  });\n-\n-  it(\"renders AutoComplete component with correct props\", () => {\n-    render(<App />);\n-\n-    const autoComplete = screen.getByLabelText(\"Country\");\n-    expect(autoComplete).toBeInTheDocument();\n-  });\n-\n-  it(\"renders DisplayWeather and SearchHistory components\", () => {\n-    render(<App />);\n-\n-    expect(screen.getByText(\"Today's Weather\")).toBeInTheDocument();\n-    expect(screen.getByText(\"Search History\")).toBeInTheDocument();\n-  });\n-\n-  it(\"handleOptionSelected updates location and adds search history\", async () => {\n-    render(<App />);\n-\n-    const autoComplete = screen.getByLabelText(\"Country\");\n-\n-    fireEvent.change(autoComplete, { target: { value: \"Test\" } });\n-\n-    await waitFor(() => {\n-      expect(getPlaces).toHaveBeenCalledWith({ q: \"Test\" });\n-    });\n-\n-    fireEvent.keyDown(autoComplete, { key: \"ArrowDown\" });\n-    fireEvent.keyDown(autoComplete, { key: \"Enter\" });\n-\n-    await waitFor(() => {\n-      expect(mockSetLocationInfo).toHaveBeenCalledWith({\n-        longitude: 102.0,\n-        latitude: 0.5,\n-        countryCode: \"TC\",\n-        regionName: \"Test Region\",\n-      });\n-      expect(mockAddSearchHistory).toHaveBeenCalledWith({\n-        longitude: 102.0,\n-        latitude: 0.5,\n-        countryCode: \"TC\",\n-        regionName: \"Test Region\",\n-      });\n-    });\n-  });\n-});\n\\ No newline at end of file\n"
                }
            ],
            "date": 1715789165743,
            "name": "Commit-0",
            "content": ""
        }
    ]
}